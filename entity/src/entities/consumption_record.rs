//! SeaORM Entity. Generated by sea-orm-codegen 0.9.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "consumption_record"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Serialize, Deserialize)]
pub struct Model {
    pub id: i32,
    pub user: i32,
    pub consumable: Option<i32>,
    pub composite_consumable: Option<i32>,
    pub time: Option<i32>,
    pub date: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    User,
    Consumable,
    CompositeConsumable,
    Time,
    Date,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    CompositeConsumable,
    Consumable,
    Date,
    Time,
    Users,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::User => ColumnType::Integer.def(),
            Self::Consumable => ColumnType::Integer.def().null(),
            Self::CompositeConsumable => ColumnType::Integer.def().null(),
            Self::Time => ColumnType::Integer.def().null(),
            Self::Date => ColumnType::Integer.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::CompositeConsumable => Entity::belongs_to(super::composite_consumable::Entity)
                .from(Column::CompositeConsumable)
                .to(super::composite_consumable::Column::Id)
                .into(),
            Self::Consumable => Entity::belongs_to(super::consumable::Entity)
                .from(Column::Consumable)
                .to(super::consumable::Column::Id)
                .into(),
            Self::Date => Entity::belongs_to(super::date::Entity)
                .from(Column::Date)
                .to(super::date::Column::Id)
                .into(),
            Self::Time => Entity::belongs_to(super::time::Entity)
                .from(Column::Time)
                .to(super::time::Column::Id)
                .into(),
            Self::Users => Entity::belongs_to(super::users::Entity)
                .from(Column::User)
                .to(super::users::Column::Id)
                .into(),
        }
    }
}

impl Related<super::composite_consumable::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CompositeConsumable.def()
    }
}

impl Related<super::consumable::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Consumable.def()
    }
}

impl Related<super::date::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Date.def()
    }
}

impl Related<super::time::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Time.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
