//! SeaORM Entity. Generated by sea-orm-codegen 0.9.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "nutrients"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Serialize, Deserialize)]
pub struct Model {
    pub id: i32,
    pub calories: f32,
    pub carbs: f32,
    pub protein: f32,
    pub fat: f32,
    pub source: f32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Calories,
    Carbs,
    Protein,
    Fat,
    Source,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    NutrientTargets,
    Consumable,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::Calories => ColumnType::Float.def(),
            Self::Carbs => ColumnType::Float.def(),
            Self::Protein => ColumnType::Float.def(),
            Self::Fat => ColumnType::Float.def(),
            Self::Source => ColumnType::Float.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::NutrientTargets => Entity::has_many(super::nutrient_targets::Entity).into(),
            Self::Consumable => Entity::has_many(super::consumable::Entity).into(),
        }
    }
}

impl Related<super::nutrient_targets::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::NutrientTargets.def()
    }
}

impl Related<super::consumable::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Consumable.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
